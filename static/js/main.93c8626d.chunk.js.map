{"version":3,"sources":["assets/beauty-products.jpg","components/Grid.js","components/SearchList.js","Api/Request.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Grid","className","src","logo","SearchList","useState","product","setProduct","query","setQuery","error","setError","loading","setLoading","type","placeholder","onChange","e","target","value","onClick","axios","get","Request","then","res","data","length","catch","color","height","width","pageSize","renderItem","item","key","id","brand","name","App","React","useEffect","document","title","Boolean","window","location","hostname","match","defaults","withCredentials","baseURL","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,6C,yMCa5BC,MATf,WACI,OACQ,yBAAKC,UAAU,QACX,yBAAKA,UAAU,SAAQ,yBAAKA,UAAU,QAAf,6CACvB,yBAAKA,UAAU,QAAQC,IAAKC,Q,gCCyC7BC,MA3Cf,WAAuB,IAAD,EACcC,mBAAS,IADvB,mBACVC,EADU,KACDC,EADC,OAEUF,mBAAS,IAFnB,mBAEVG,EAFU,KAEHC,EAFG,OAGUJ,oBAAS,GAHnB,mBAGVK,EAHU,KAGHC,EAHG,OAIcN,oBAAS,GAJvB,mBAIVO,EAJU,KAIDC,EAJC,KAkBlB,OACQ,yBAAKZ,UAAU,aACX,yBAAKA,UAAU,aACX,2BAAOA,UAAU,QAAQa,KAAK,OAAOC,YAAY,eAAeC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,UACjG,4BAAQlB,UAAU,SAASmB,QAjB5B,WACXP,GAAW,GCTI,SAACL,GACpB,OAAOa,IAAMC,IAAN,qBAAwBd,IDS3Be,CAAQf,GAAOgB,MAAK,SAACC,GACbA,EAAIC,KAAKC,OAAS,GAClBpB,EAAWkB,EAAIC,MACff,GAAS,IAETA,GAAS,GAEbE,GAAW,MACZe,OAAM,WACLjB,GAAS,QAMD,WAEJ,yBAAKV,UAAWW,EAAU,SAAW,cAChCA,EAAU,kBAAC,IAAD,CAAQE,KAAK,OACLe,MAAM,OACNC,OAAQ,IACRC,MAAO,MACrBrB,EAAQ,yBAAKT,UAAU,UAAf,kDAA+E,kBAAC,IAAD,CACxFyB,KAAMpB,EACN0B,SAAU,EACVC,WAAY,SAACC,GAAD,OACR,yBAAKjC,UAAU,OAAOkC,IAAKD,EAAKE,IAC5B,4BAAK,0BAAMnC,UAAU,YAAYiC,EAAKG,OAAtC,IAAoD,mCAASH,EAAKI,cEtBnFC,MAdf,WAME,OAJCC,IAAMC,WAAU,WACZC,SAASC,MAAQ,aAIpB,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN3B,IAAM4B,SAASC,iBAAkB,EACjC7B,IAAM4B,SAASE,QAAU,yEACzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAlB,GACLmD,QAAQnD,MAAMA,EAAMoD,c","file":"static/js/main.93c8626d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beauty-products.9840c506.jpg\";","import React from 'react';\nimport logo from '../assets/beauty-products.jpg';\nimport '../App.css';\n\nfunction Grid() {\n    return (\n            <div className='Grid'>\n                <div className='Block'><div className='text'>This is a page for beauty Product search</div></div>\n                <img className='Block' src={logo} />\n            </div>\n    );\n}\n\nexport default Grid;\n","import React, {useState} from 'react';\nimport '../App.css';\nimport { Request } from '../Api/Request'\nimport PaginationList from 'react-pagination-list'\nimport Loader from 'react-loader-spinner'\n\nfunction SearchList() {\n    const [ product, setProduct ] = useState([])\n    const [ query, setQuery ] = useState('')\n    const [ error, setError ] = useState(false)\n    const [ loading, setLoading ] = useState(false)\n    const search = () => {\n        setLoading(true)\n        Request(query).then((res) => {\n            if (res.data.length > 0) {\n                setProduct(res.data)\n                setError(false)\n            } else {\n                setError(true)\n            }\n            setLoading(false)\n        }).catch(() => {\n            setError(true)})\n    }\n    return (\n            <div className='SearchBox'>\n                <div className='SearchBar'>\n                    <input className='input' type=\"text\" placeholder=\"Product Name\" onChange={e => setQuery(e.target.value)}/>\n                    <button className='button' onClick={search}>Search</button>\n                </div>\n                <div className={loading ? 'Loader' : 'pagination'}>\n                    {loading ? <Loader type=\"Puff\"\n                                       color=\"#FFF\"\n                                       height={100}\n                                       width={100}\n                    /> : error ? <div className='Loader'>Product not found, search with another keyword</div> : <PaginationList\n                        data={product}\n                        pageSize={5}\n                        renderItem={(item) => (\n                            <div className='list' key={item.id}>\n                                <li ><text className='listItem'>{item.brand}</text> <text>- {item.name}</text></li>\n                            </div>\n                        )}\n                    />}\n                </div>\n            </div>\n    );\n}\n\nexport default SearchList;\n","\nimport axios from 'axios'\n\nexport const Request = (query) => {\n    return axios.get(`/product?q=${query}`)\n}","import React from 'react';\nimport './App.css';\nimport Grid from \"./components/Grid\";\nimport SearchList from \"./components/SearchList\";\nfunction App() {\n\n   React.useEffect(() => {\n       document.title = 'JoliMoi'\n   })\n\n  return (\n    <div className=\"App\">\n      <Grid/>\n      <SearchList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport axios from 'axios'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\naxios.defaults.withCredentials = false\naxios.defaults.baseURL = \"https://cors-anywhere.herokuapp.com/https://skincare-api.herokuapp.com\"\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}